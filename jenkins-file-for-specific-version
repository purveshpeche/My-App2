pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_VERSION', defaultValue: 'v1', description: 'Enter Docker image version to deploy (e.g. v1, v2)')
    }

    environment {
        DOCKER_IMAGE = 'purveshpeche/myapp'
        EC2_HOST = 'ubuntu@ec2-44-203-92-255.compute-1.amazonaws.com'
    }

    stages {

        stage('Validate Input') {
            steps {
                script {
                    if (!params.IMAGE_VERSION?.trim()) {
                        error "IMAGE_VERSION parameter cannot be empty"
                    } else {
                        echo "‚úÖ Proceeding with Docker image: $DOCKER_IMAGE:${params.IMAGE_VERSION}"
                    }
                }
            }
        }

        stage('Test SSH Connectivity') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh "ssh -o StrictHostKeyChecking=no $EC2_HOST echo '‚úÖ SSH connection successful!'"
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    sh """
ssh -o StrictHostKeyChecking=no $EC2_HOST << 'EOF'
set -e

# Ensure Docker is installed
if ! command -v docker &> /dev/null; then
    echo "Installing Docker..."
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=\$ID
    fi

    if [ "\$OS" = "ubuntu" ]; then
        sudo apt update -y
        sudo apt install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker
    elif [ "\$OS" = "amzn" ]; then
        sudo yum update -y
        sudo yum install -y docker
        sudo systemctl start docker
        sudo systemctl enable docker
    else
        echo "Unsupported OS. Exiting."
        exit 1
    fi
fi

echo "‚úÖ Docker is ready. Pulling and deploying..."

sudo docker pull $DOCKER_IMAGE:${params.IMAGE_VERSION}
sudo docker stop myapp || true
sudo docker rm myapp || true
sudo docker run -d --name myapp -p 80:80 $DOCKER_IMAGE:${params.IMAGE_VERSION}

echo "üöÄ Deployed $DOCKER_IMAGE:${params.IMAGE_VERSION} successfully."
EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful for version: ${params.IMAGE_VERSION}"
        }
        failure {
            echo "‚ùå Deployment failed"
        }
    }
}
